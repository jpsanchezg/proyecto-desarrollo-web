{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\juanp\\\\Documents\\\\github\\\\proyecto-desarrollo-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Invoice } from 'src/app/model/invoice';\nimport { Purchase } from 'src/app/model/purchase';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../product-controller/product-controller.service\";\nimport * as i3 from \"../user-controller/user-controller.service\";\nexport class InvoiceControllerService {\n  constructor(http, productControllerService, userControllerService) {\n    this.http = http;\n    this.productControllerService = productControllerService;\n    this.userControllerService = userControllerService;\n    this.listInvoices = [];\n    this.lastId = 0;\n  }\n\n  getListInvoices() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var json = yield _this.http.get(`${environment.baseURL}/invoice/${_this.userControllerService.getCurrentUser().getUsername()}`).toPromise();\n      json.forEach(element => {\n        var listPurchases = [];\n        element.listPurchases.forEach(element2 => {\n          var purchase = new Purchase(element2.productId, element2.quantity);\n          purchase.setId(element2.id);\n          listPurchases.push(purchase);\n        });\n        var invoice = new Invoice(element.id, element.userId, listPurchaces, element.priceTotal);\n      });\n    })();\n  }\n\n  addInvoice(userId, listPurchases) {\n    let purchaseTotal = 0;\n\n    for (let purchase of listPurchases) {\n      purchaseTotal += this.productControllerService.findProductById(purchase.getProductId()).getPrice() * purchase.getQuantity();\n    }\n\n    this.listInvoices.push(new Invoice(this.lastId, userId, listPurchases, purchaseTotal));\n    this.lastId++;\n  }\n\n  findInvoiceById(id) {\n    for (let invoice of this.listInvoices) {\n      if (invoice.getId() == id) {\n        return invoice;\n      }\n    }\n\n    return null;\n  }\n\n  findInvoicesByRangeDates(date1, date2) {\n    let invoices = [];\n\n    for (let invoice of this.listInvoices) {\n      if (invoice.getDate() >= date1 && invoice.getDate() <= date2) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  findInvoicesByUserId(userId) {\n    let invoices = [];\n\n    for (let invoice of this.listInvoices) {\n      if (invoice.getUserId() == userId) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  findInvoicesByUserIdAndDateRange(userId, date1, date2) {\n    let invoices = [];\n\n    for (let invoice of this.findInvoicesByRangeDates(date1, date2)) {\n      if (invoice.getUserId() == userId) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  removeInvoiceById(id) {\n    let Invoice;\n    Invoice = this.findInvoiceById(id);\n    this.removeInvoice(Invoice);\n  }\n\n  removeInvoice(Invoice) {\n    if (Invoice != null) {\n      let index = this.listInvoices.indexOf(Invoice);\n      this.listInvoices.splice(index, 1);\n    }\n  }\n\n}\n\nInvoiceControllerService.ɵfac = function InvoiceControllerService_Factory(t) {\n  return new (t || InvoiceControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductControllerService), i0.ɵɵinject(i3.UserControllerService));\n};\n\nInvoiceControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InvoiceControllerService,\n  factory: InvoiceControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/juanp/Documents/github/proyecto-desarrollo-web/src/app/service/invoice-controller/invoice-controller.service.ts"],"names":["Invoice","Purchase","environment","i0","i1","i2","i3","InvoiceControllerService","constructor","http","productControllerService","userControllerService","listInvoices","lastId","getListInvoices","json","get","baseURL","getCurrentUser","getUsername","toPromise","forEach","element","listPurchases","element2","purchase","productId","quantity","setId","id","push","invoice","userId","listPurchaces","priceTotal","addInvoice","purchaseTotal","findProductById","getProductId","getPrice","getQuantity","findInvoiceById","getId","findInvoicesByRangeDates","date1","date2","invoices","getDate","findInvoicesByUserId","getUserId","findInvoicesByUserIdAndDateRange","removeInvoiceById","removeInvoice","index","indexOf","splice","ɵfac","InvoiceControllerService_Factory","t","ɵɵinject","HttpClient","ProductControllerService","UserControllerService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Invoice } from 'src/app/model/invoice';\r\nimport { Purchase } from 'src/app/model/purchase';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../product-controller/product-controller.service\";\r\nimport * as i3 from \"../user-controller/user-controller.service\";\r\nexport class InvoiceControllerService {\r\n    constructor(http, productControllerService, userControllerService) {\r\n        this.http = http;\r\n        this.productControllerService = productControllerService;\r\n        this.userControllerService = userControllerService;\r\n        this.listInvoices = [];\r\n        this.lastId = 0;\r\n    }\r\n    async getListInvoices() {\r\n        var json = await this.http.get(`${environment.baseURL}/invoice/${this.userControllerService.getCurrentUser().getUsername()}`).toPromise();\r\n        json.forEach((element) => {\r\n            var listPurchases = [];\r\n            element.listPurchases.forEach(element2 => {\r\n                var purchase = new Purchase(element2.productId, element2.quantity);\r\n                purchase.setId(element2.id);\r\n                listPurchases.push(purchase);\r\n            });\r\n            var invoice = new Invoice(element.id, element.userId, listPurchaces, element.priceTotal);\r\n        });\r\n    }\r\n    addInvoice(userId, listPurchases) {\r\n        let purchaseTotal = 0;\r\n        for (let purchase of listPurchases) {\r\n            purchaseTotal += this.productControllerService.findProductById(purchase.getProductId()).getPrice() * purchase.getQuantity();\r\n        }\r\n        this.listInvoices.push(new Invoice(this.lastId, userId, listPurchases, purchaseTotal));\r\n        this.lastId++;\r\n    }\r\n    findInvoiceById(id) {\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getId() == id) {\r\n                return invoice;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    findInvoicesByRangeDates(date1, date2) {\r\n        let invoices = [];\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getDate() >= date1 && invoice.getDate() <= date2) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    findInvoicesByUserId(userId) {\r\n        let invoices = [];\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getUserId() == userId) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    findInvoicesByUserIdAndDateRange(userId, date1, date2) {\r\n        let invoices = [];\r\n        for (let invoice of this.findInvoicesByRangeDates(date1, date2)) {\r\n            if (invoice.getUserId() == userId) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    removeInvoiceById(id) {\r\n        let Invoice;\r\n        Invoice = this.findInvoiceById(id);\r\n        this.removeInvoice(Invoice);\r\n    }\r\n    removeInvoice(Invoice) {\r\n        if (Invoice != null) {\r\n            let index = this.listInvoices.indexOf(Invoice);\r\n            this.listInvoices.splice(index, 1);\r\n        }\r\n    }\r\n}\r\nInvoiceControllerService.ɵfac = function InvoiceControllerService_Factory(t) { return new (t || InvoiceControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductControllerService), i0.ɵɵinject(i3.UserControllerService)); };\r\nInvoiceControllerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: InvoiceControllerService, factory: InvoiceControllerService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}