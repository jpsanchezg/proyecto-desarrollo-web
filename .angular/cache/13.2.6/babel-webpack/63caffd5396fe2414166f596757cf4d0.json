{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\juanp\\\\Documents\\\\github\\\\proyecto-desarrollo-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { SecurityContext } from '@angular/core';\nimport { Product } from 'src/app/model/product';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nexport let ProductControllerService = /*#__PURE__*/(() => {\n  class ProductControllerService {\n    constructor(http, _sanitizer) {\n      this.http = http;\n      this._sanitizer = _sanitizer;\n      this.listProducts = [];\n      this.lastId = 0;\n      this.getListProducts();\n    }\n\n    getListProducts() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var json = yield _this.http.get(`${environment.baseURL}/product/`).toPromise();\n        _this.listProducts = [];\n        json.forEach(element => {\n          var imagePath = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, _this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + element.image));\n\n          var product = new Product(element.id, element.name, +element.price, imagePath);\n\n          _this.listProducts.push(product);\n        });\n        return _this.listProducts;\n      })();\n    }\n\n    addProduct(name, price, image) {\n      this.http.post(`${environment.baseURL}/product/create`, {\n        name: name,\n        price: price,\n        image: image\n      });\n      this.getListProducts();\n    }\n\n    modProduct(product, name, price) {\n      this.http.post(`${environment.baseURL}/product/update`, {\n        name: name,\n        price: price,\n        id: product.getId()\n      });\n      this.getListProducts();\n    }\n\n    deleteProduct(product) {\n      this.http.delete(`${environment.baseURL}/product/delete/${product.getId()}`);\n      this.getListProducts();\n    }\n\n    findProductById(id) {\n      for (let product of this.listProducts) {\n        if (product.getId() == id) {\n          return product;\n        }\n      }\n\n      return null;\n    }\n\n    findProductByName(name) {\n      for (let product of this.listProducts) {\n        if (product.getName() == name) {\n          return product;\n        }\n      }\n\n      return null;\n    }\n\n    removeProductByName(name) {\n      let product;\n      product = this.findProductByName(name);\n      if (product != null) this.removeProductById(product.getId());\n    }\n\n    removeProductById(id) {\n      this.http.delete(`${environment.baseURL}/product/delete/${id}`).toPromise();\n    }\n\n    removeProduct(product) {\n      this.removeProductById(product.getId());\n    }\n\n  }\n\n  ProductControllerService.ɵfac = function ProductControllerService_Factory(t) {\n    return new (t || ProductControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer));\n  };\n\n  ProductControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductControllerService,\n    factory: ProductControllerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductControllerService;\n})();","map":null,"metadata":{},"sourceType":"module"}