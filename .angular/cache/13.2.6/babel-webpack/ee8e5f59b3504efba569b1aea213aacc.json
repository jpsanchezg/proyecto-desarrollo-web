{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\juanp\\\\Documents\\\\github\\\\proyecto-desarrollo-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Invoice } from 'src/app/model/invoice';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../product-controller/product-controller.service\";\nexport class InvoiceControllerService {\n  constructor(http, productControllerService) {\n    this.http = http;\n    this.productControllerService = productControllerService;\n    this.listInvoices = [];\n    this.lastId = 0;\n  }\n\n  getListInvoices() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var json = yield _this.http.get(`${environment.baseURL}/invoice/`).toPromise();\n      _this.listProducts = [];\n      json.forEach(element => {\n        var imagePath = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, _this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + element.image)); //debugger;\n\n\n        var product = new Product(element.id, element.name, +element.price, imagePath);\n\n        _this.listProducts.push(product);\n      });\n      return _this.listProducts;\n    })();\n  }\n\n  addInvoice(userId, listPurchases) {\n    let purchaseTotal = 0;\n\n    for (let purchase of listPurchases) {\n      purchaseTotal += this.productControllerService.findProductById(purchase.getProductId()).getPrice() * purchase.getQuantity();\n    }\n\n    this.listInvoices.push(new Invoice(this.lastId, userId, listPurchases, purchaseTotal));\n    this.lastId++;\n  }\n\n  findInvoiceById(id) {\n    for (let invoice of this.listInvoices) {\n      if (invoice.getId() == id) {\n        return invoice;\n      }\n    }\n\n    return null;\n  }\n\n  findInvoicesByRangeDates(date1, date2) {\n    let invoices = [];\n\n    for (let invoice of this.listInvoices) {\n      if (invoice.getDate() >= date1 && invoice.getDate() <= date2) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  findInvoicesByUserId(userId) {\n    let invoices = [];\n\n    for (let invoice of this.listInvoices) {\n      if (invoice.getUserId() == userId) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  findInvoicesByUserIdAndDateRange(userId, date1, date2) {\n    let invoices = [];\n\n    for (let invoice of this.findInvoicesByRangeDates(date1, date2)) {\n      if (invoice.getUserId() == userId) {\n        invoices.push(invoice);\n      }\n    }\n\n    return invoices;\n  }\n\n  removeInvoiceById(id) {\n    let Invoice;\n    Invoice = this.findInvoiceById(id);\n    this.removeInvoice(Invoice);\n  }\n\n  removeInvoice(Invoice) {\n    if (Invoice != null) {\n      let index = this.listInvoices.indexOf(Invoice);\n      this.listInvoices.splice(index, 1);\n    }\n  }\n\n}\n\nInvoiceControllerService.ɵfac = function InvoiceControllerService_Factory(t) {\n  return new (t || InvoiceControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductControllerService));\n};\n\nInvoiceControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InvoiceControllerService,\n  factory: InvoiceControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/juanp/Documents/github/proyecto-desarrollo-web/src/app/service/invoice-controller/invoice-controller.service.ts"],"names":["Invoice","environment","i0","i1","i2","InvoiceControllerService","constructor","http","productControllerService","listInvoices","lastId","getListInvoices","json","get","baseURL","toPromise","listProducts","forEach","element","imagePath","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","bypassSecurityTrustResourceUrl","image","product","Product","id","name","price","push","addInvoice","userId","listPurchases","purchaseTotal","purchase","findProductById","getProductId","getPrice","getQuantity","findInvoiceById","invoice","getId","findInvoicesByRangeDates","date1","date2","invoices","getDate","findInvoicesByUserId","getUserId","findInvoicesByUserIdAndDateRange","removeInvoiceById","removeInvoice","index","indexOf","splice","ɵfac","InvoiceControllerService_Factory","t","ɵɵinject","HttpClient","ProductControllerService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Invoice } from 'src/app/model/invoice';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../product-controller/product-controller.service\";\r\nexport class InvoiceControllerService {\r\n    constructor(http, productControllerService) {\r\n        this.http = http;\r\n        this.productControllerService = productControllerService;\r\n        this.listInvoices = [];\r\n        this.lastId = 0;\r\n    }\r\n    async getListInvoices() {\r\n        var json = await this.http.get(`${environment.baseURL}/invoice/`).toPromise();\r\n        this.listProducts = [];\r\n        json.forEach((element) => {\r\n            var imagePath = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + element.image));\r\n            //debugger;\r\n            var product = new Product(element.id, element.name, +element.price, imagePath);\r\n            this.listProducts.push(product);\r\n        });\r\n        return this.listProducts;\r\n    }\r\n    addInvoice(userId, listPurchases) {\r\n        let purchaseTotal = 0;\r\n        for (let purchase of listPurchases) {\r\n            purchaseTotal += this.productControllerService.findProductById(purchase.getProductId()).getPrice() * purchase.getQuantity();\r\n        }\r\n        this.listInvoices.push(new Invoice(this.lastId, userId, listPurchases, purchaseTotal));\r\n        this.lastId++;\r\n    }\r\n    findInvoiceById(id) {\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getId() == id) {\r\n                return invoice;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    findInvoicesByRangeDates(date1, date2) {\r\n        let invoices = [];\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getDate() >= date1 && invoice.getDate() <= date2) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    findInvoicesByUserId(userId) {\r\n        let invoices = [];\r\n        for (let invoice of this.listInvoices) {\r\n            if (invoice.getUserId() == userId) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    findInvoicesByUserIdAndDateRange(userId, date1, date2) {\r\n        let invoices = [];\r\n        for (let invoice of this.findInvoicesByRangeDates(date1, date2)) {\r\n            if (invoice.getUserId() == userId) {\r\n                invoices.push(invoice);\r\n            }\r\n        }\r\n        return invoices;\r\n    }\r\n    removeInvoiceById(id) {\r\n        let Invoice;\r\n        Invoice = this.findInvoiceById(id);\r\n        this.removeInvoice(Invoice);\r\n    }\r\n    removeInvoice(Invoice) {\r\n        if (Invoice != null) {\r\n            let index = this.listInvoices.indexOf(Invoice);\r\n            this.listInvoices.splice(index, 1);\r\n        }\r\n    }\r\n}\r\nInvoiceControllerService.ɵfac = function InvoiceControllerService_Factory(t) { return new (t || InvoiceControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductControllerService)); };\r\nInvoiceControllerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: InvoiceControllerService, factory: InvoiceControllerService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}