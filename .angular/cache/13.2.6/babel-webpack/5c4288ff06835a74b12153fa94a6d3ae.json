{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\juanp\\\\Documents\\\\github\\\\proyecto-desarrollo-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { SecurityContext } from '@angular/core';\nimport { Product } from 'src/app/model/product';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nexport class ProductControllerService {\n  constructor(http, _sanitizer) {\n    this.http = http;\n    this._sanitizer = _sanitizer;\n    this.listProducts = [];\n    this.lastId = 0;\n    this.getListProducts();\n  }\n\n  getListProducts() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var json = yield _this.http.get(`${environment.baseURL}/product/`).toPromise();\n      _this.listProducts = [];\n      json.forEach(element => {\n        var imagePath = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, _this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + element.image)); //debugger;\n\n\n        var product = new Product(element.id, element.name, +element.price, imagePath);\n\n        _this.listProducts.push(product);\n      });\n      return _this.listProducts;\n    })();\n  }\n\n  addProduct(name, price, image) {\n    this.http.post(`${environment.baseURL}/product/create`, {\n      name: name,\n      price: price,\n      image: image\n    });\n    this.getListProducts();\n  }\n\n  modProduct(product, name, price) {\n    this.http.post(`${environment.baseURL}/product/update`, {\n      name: name,\n      price: price,\n      id: product.getId()\n    });\n    this.ggetListProducts();\n  }\n\n  deleteProduct(product) {\n    this.http.delete(`${environment.baseURL}/product/delete/${product.getId()}`);\n  }\n\n  findProductById(id) {\n    for (let product of this.listProducts) {\n      if (product.getId() == id) {\n        return product;\n      }\n    }\n\n    return null;\n  }\n\n  findProductByName(name) {\n    for (let product of this.listProducts) {\n      if (product.getName() == name) {\n        return product;\n      }\n    }\n\n    return null;\n  }\n\n  removeProductByName(name) {\n    let product;\n    product = this.findProductByName(name);\n    if (product != null) this.removeProduct(product);\n  }\n\n  removeProductById(id) {\n    let product;\n    product = this.findProductById(id);\n    this.removeProduct(product);\n  }\n\n  removeProduct(product) {\n    if (product != null) {\n      let index = this.listProducts.indexOf(product);\n      this.listProducts.splice(index, 1);\n    }\n  }\n\n}\n\nProductControllerService.ɵfac = function ProductControllerService_Factory(t) {\n  return new (t || ProductControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer));\n};\n\nProductControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductControllerService,\n  factory: ProductControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/juanp/Documents/github/proyecto-desarrollo-web/src/app/service/product-controller/product-controller.service.ts"],"names":["SecurityContext","Product","environment","i0","i1","i2","ProductControllerService","constructor","http","_sanitizer","listProducts","lastId","getListProducts","json","get","baseURL","toPromise","forEach","element","imagePath","sanitize","RESOURCE_URL","bypassSecurityTrustResourceUrl","image","product","id","name","price","push","addProduct","post","modProduct","getId","ggetListProducts","deleteProduct","delete","findProductById","findProductByName","getName","removeProductByName","removeProduct","removeProductById","index","indexOf","splice","ɵfac","ProductControllerService_Factory","t","ɵɵinject","HttpClient","DomSanitizer","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { SecurityContext } from '@angular/core';\r\nimport { Product } from 'src/app/model/product';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/platform-browser\";\r\nexport class ProductControllerService {\r\n    constructor(http, _sanitizer) {\r\n        this.http = http;\r\n        this._sanitizer = _sanitizer;\r\n        this.listProducts = [];\r\n        this.lastId = 0;\r\n        this.getListProducts();\r\n    }\r\n    async getListProducts() {\r\n        var json = await this.http.get(`${environment.baseURL}/product/`).toPromise();\r\n        this.listProducts = [];\r\n        json.forEach((element) => {\r\n            var imagePath = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + element.image));\r\n            //debugger;\r\n            var product = new Product(element.id, element.name, +element.price, imagePath);\r\n            this.listProducts.push(product);\r\n        });\r\n        return this.listProducts;\r\n    }\r\n    addProduct(name, price, image) {\r\n        this.http.post(`${environment.baseURL}/product/create`, { name: name, price: price, image: image });\r\n        this.getListProducts();\r\n    }\r\n    modProduct(product, name, price) {\r\n        this.http.post(`${environment.baseURL}/product/update`, { name: name, price: price, id: product.getId() });\r\n        this.ggetListProducts();\r\n    }\r\n    deleteProduct(product) {\r\n        this.http.delete(`${environment.baseURL}/product/delete/${product.getId()}`);\r\n    }\r\n    findProductById(id) {\r\n        for (let product of this.listProducts) {\r\n            if (product.getId() == id) {\r\n                return product;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    findProductByName(name) {\r\n        for (let product of this.listProducts) {\r\n            if (product.getName() == name) {\r\n                return product;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    removeProductByName(name) {\r\n        let product;\r\n        product = this.findProductByName(name);\r\n        if (product != null)\r\n            this.removeProduct(product);\r\n    }\r\n    removeProductById(id) {\r\n        let product;\r\n        product = this.findProductById(id);\r\n        this.removeProduct(product);\r\n    }\r\n    removeProduct(product) {\r\n        if (product != null) {\r\n            let index = this.listProducts.indexOf(product);\r\n            this.listProducts.splice(index, 1);\r\n        }\r\n    }\r\n}\r\nProductControllerService.ɵfac = function ProductControllerService_Factory(t) { return new (t || ProductControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer)); };\r\nProductControllerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductControllerService, factory: ProductControllerService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}